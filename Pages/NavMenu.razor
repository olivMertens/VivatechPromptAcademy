@using Cosmos.Chat.GPT.Constants
@using Cosmos.Chat.GPT.Services
@inject ChatService chatService


<div class="h-100 d-flex flex-column" style="min-width: 275px;">

    <div class="navbar navbar-dark bg-primary" style="background-color:#88949c">
        <div class="container-fluid justify-content-between">
            <div class="flex-fill">
                    <img src="img/icon/prompt-academy-logo-svg" alt="">
                    <img src="img/azure.svg" alt="" width="30px" height="30px">
                    <button class="navbar-toggler border-0" @onclick="HelpDialogToggle">
                    <i class="bi bi-patch-question text-light"></i>
                    </button>
                    <button class="navbar-toggler border-0" @onclick="ToggleNavMenu">
                    <i class="bi bi-arrow-right-square-fill text-light"></i>
                    </button>
            </div>
        </div>
    </div>

    <div class="flex-grow-1 flex-column justify-content-center overflow-y-auto overflow-x-hidden">
        @if (_loadingComplete == true)
        {
            <div>
                <nav class="flex-column">
                    <div class="nav-item py-2 d-grid">
                        <NavLink style="cursor:pointer" class="btn btn-sm mx-1 btn-secondary d-flex flex-row align-items start" Match="NavLinkMatch.All" @onclick="@(e => NewChat())">
                            <i class="bi bi-plus"></i>
                            <span class="flex-fill">
                                Create New Chat
                            </span>
                        </NavLink>
                    </div>
                    <div class="nav-item py-2 d-grid">
                        <NavLink style="cursor:pointer" class="btn btn-sm mx-1 btn-secondary d-flex flex-row align-items start" Match="NavLinkMatch.All" @onclick="@(e => OpenConfirmation("","", true))">
                            <i class="bi bi-trash-fill"></i>
                            <span class="flex-fill">
                                Delete all Chats
                            </span>
                        </NavLink>
                    </div>
                    <div class="row row-cols-1 g-2 px-2 d-flex flex-column align-items-start">
                        @foreach (var session in ChatSessions)
                        {
                            <div class="col">
                                <div class="card @(IsActiveSession(session.SessionId) ? "bg-primary text-light" : "bg-primary opacity-50 text-light")">
                                    <div class="card-body user-select-none" role="button" @onclick="@(e => LoadChat(session.SessionId,session.Name, session.TokensUsed))">
                                        <a class="card-title text-decoration-none h6">
                                            @if (IsActiveSession(session.SessionId))
                                            {
                                                <i class="bi bi-chat-right-dots-fill me-2"></i>
                                            }
                                            <span title="@session.Name" class="ms-1">                                                
                                                @{
                                                    string substring = SafeSubstring(session.Name, 20);
                                                    MarkupString html = new MarkupString(substring);
                                                }
                                                @html
                                            </span>
                                        </a>
                                    </div>
                                    <div class="card-footer d-flex align-items-center justify-content-between">
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenInput(session.SessionId,session.Name))">
                                                <i class="bi bi-pencil-fill me-1"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenConfirmation(session.SessionId,session.Name))">
                                                <i class="bi bi-trash-fill ms-1"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </nav>
            </div>
        }
    </div>
</div>



@if (_deletePopUpOpen)
{
    <Confirmation Caption="Delete a Chat"
        Message="@_popUpText"
        OnClose="@OnConfirmationClose"
        Type="Confirmation.Category.DeleteNot">
    </Confirmation>
}

@if (_helpPopUpOpen)
{
    <Confirmation Caption="Help"
        Message="<h3>Step 1: Identify the Goal</h3>
                <p>The first step in creating a prompt engineering is to identify the goal. What action do you want the user to take? Do you want them to sign up for a newsletter, download an app, or make a purchase? Once you have identified the goal, you can move on to the next step.</p>
                <h3>Step 2: Craft the Prompt</h3>
                            <p>The next step is to craft the prompt. This is where you create the question or statement that will encourage the user to take the desired action. Make sure the prompt is clear and concise, and that it speaks to the user's needs. For example, if you want the user to sign up for a newsletter, you could create a prompt like 
                            Sign up for our newsletter and get the latest updates!</p>
                <h3>Step 3: Test and Optimize</h3>
                            <p>The final step is to test and optimize the prompt. This involves testing different versions of the prompt to see which one performs best. You can also use A/B testing to compare different versions of the prompt and determine which one is most effective. Once you have identified the best performing prompt, you can use it to drive conversions.</p>"
        OnClose="@OnConfirmationClose"
        Type="Confirmation.Category.Okay">
    </Confirmation>
}

@if (_renamePopUpOpen)
{
    <Input Caption="Rename a Chat"
        Value="@_popUpText"
        OnClose="@OnInputClose" >
    </Input>
}


@code {

    [Parameter]
    public EventCallback<Session> OnChatClicked { get; set; } = default!;

    [Parameter]
    public static List<Session> ChatSessions { get; set; } = new();

    [Parameter]
    public EventCallback OnNavBarVisibilityUpdated { get; set; }

    [Parameter]
    public EventCallback OnThemeUpdated { get; set; }

    private string? _sessionId;
    private string? _popUpText;
    private bool _deletePopUpOpen = false;
    private bool _helpPopUpOpen = false;
    private bool _isDeleteAll = false;
    private bool _loadingComplete;
    private bool _renamePopUpOpen = false;

    public Session? CurrentSession;

    private static event EventHandler<string>? OnNavMenuChanged;

    async private Task ToggleNavMenu()
    {
        await OnNavBarVisibilityUpdated.InvokeAsync();
    }




    async private Task ChangeTheme()
    {
        await OnThemeUpdated.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        OnNavMenuChanged += async (o, e) =>
        {
            await this.InvokeAsync(async () =>
            {
                this.StateHasChanged();
                await LoadCurrentChatAsync();
            });
        };
    }

    private void HelpDialogToggle()
    {

        _helpPopUpOpen = true;

    }

    private void OpenConfirmation(string id, string title, bool isDeleteAll = false)
    {
        _deletePopUpOpen = true;
        _isDeleteAll = isDeleteAll;
        if(isDeleteAll)
        {
            _popUpText = $"Do you want to delete all chats?";
            _sessionId = Interface.EMPTY_SESSION;
        }
        else
        {
            _popUpText = $"Do you want to delete the chat \"{title}\"?";
            _sessionId = id;
        }

    }

    public void UpdateNavMenuDisplay(string reason = "")
    {
        if (OnNavMenuChanged is not null)
        {
            OnNavMenuChanged.Invoke(null, reason);
        }
    }

    private async Task OnConfirmationClose(bool isOk)
    {
        bool updateCurrentChat=false;

        if (CurrentSession is not null & _sessionId == CurrentSession?.SessionId)
            updateCurrentChat = true;

        if (isOk)
        {
            _deletePopUpOpen = false;
            if(_isDeleteAll)
                foreach (var CurrentSession in ChatSessions)
                {
                    _sessionId = CurrentSession.SessionId;
                    await chatService.DeleteChatSessionAsync(_sessionId);
                }

            else{
            await chatService.DeleteChatSessionAsync(_sessionId);
            }

            _deletePopUpOpen = false;

            UpdateNavMenuDisplay("Delete");

            if (!updateCurrentChat)
                return;

            CurrentSession = new Session();
            CurrentSession.SessionId = Interface.EMPTY_SESSION;
            CurrentSession.Name = string.Empty;

            if (ChatSessions is not null & ChatSessions?.Count > 0)
            {
                var match = ChatSessions?.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.SessionId = match.SessionId;
                    CurrentSession.Name = match.Name;
                    CurrentSession.TokensUsed = match.TokensUsed;
                }
            }

            await LoadCurrentChatAsync();
        }

        _deletePopUpOpen = false;
    }

    private void OpenInput(string id, string title)
    {
        _renamePopUpOpen = true;
        _sessionId = id;
        _popUpText = title;
    }

    private async Task OnInputClose(string newName)
    {
        if (newName!="")
        {
            bool updateCurrentChat = false;

            if (_sessionId == CurrentSession?.SessionId)
            {
                updateCurrentChat = true;
            }

            await chatService.RenameChatSessionAsync(_sessionId, newName);

            _renamePopUpOpen = false;

            UpdateNavMenuDisplay("Rename");

            if (!updateCurrentChat)
            {
                return;
            }

            if (CurrentSession is not null)
            {
                CurrentSession.Name = newName;
            }
            await LoadCurrentChatAsync();
        }

        _renamePopUpOpen = false;
    }

    private async Task NewChat()
    {
        await chatService.CreateNewChatSessionAsync();

        if (ChatSessions.Count == 1)
        {
            CurrentSession = ChatSessions[0] with { };
            await LoadCurrentChatAsync();
        }

        UpdateNavMenuDisplay("Add");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_loadingComplete == true)
            return;

        _loadingComplete = false;

        ChatSessions = await chatService.GetAllChatSessionsAsync();
        if (CurrentSession is not null && ChatSessions is not null & ChatSessions?.Count > 0)
        {
            var match = ChatSessions?.FirstOrDefault();
            if (match is not null)
            {
                CurrentSession.SessionId = match.SessionId;
                CurrentSession.Name = match.Name;
                CurrentSession.TokensUsed = match.TokensUsed;
            }
        }

        _loadingComplete = true;
        await LoadCurrentChatAsync();

    }

    private async Task<int> LoadCurrentChatAsync()
    {
        int index = 0;
        if (CurrentSession is not null & ChatSessions is not null & ChatSessions?.Count > 0)
        {
            index = ChatSessions?.FindIndex(s => s.SessionId == CurrentSession?.SessionId) ?? 0;
        }
        if (CurrentSession is null || index < 0)
        {
            CurrentSession = new Session();
            CurrentSession.SessionId = Interface.EMPTY_SESSION;
            CurrentSession.Name = string.Empty;

            if (ChatSessions is not null & ChatSessions?.Count > 0)
            {   
                var match = ChatSessions?.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.SessionId = match.SessionId;
                    CurrentSession.Name = match.Name;
                    CurrentSession.TokensUsed = match.TokensUsed;
                }
            }            
        }

        await OnChatClicked.InvokeAsync(CurrentSession);

        return 0;
    }

    async private Task<int> LoadChat(string _sessionId, string sessionName, int? tokensUsed)
    {
        if (ChatSessions is null) return 0;

        if (CurrentSession is null)
           CurrentSession = new Session();

        CurrentSession.SessionId = _sessionId;
        CurrentSession.Name = sessionName;
        CurrentSession.TokensUsed = tokensUsed;

        await LoadCurrentChatAsync();

        return 0;
    }

    private bool IsActiveSession(string _sessionId) => CurrentSession switch
    {
        null => true,
        (Session s) when s.SessionId == _sessionId => true,
        _ => false
    };

    public string SafeSubstring(string text, int maxLength) => text switch
    {
        null => string.Empty,
        _ => text.Length > maxLength ? text.Substring(0, maxLength) + "..." : text
    };
}