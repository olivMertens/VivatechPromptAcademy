@using Cosmos.Chat.GPT.Constants
@using Cosmos.Chat.GPT.Services
@using Humanizer
@using System.Text.RegularExpressions;
@inject ChatService chatService
@inject IJSRuntime JSRuntime

<div class="h-100 mh-100 d-flex flex-column overflow-hidden justify-content-start">
    @if (ShowHeader)
    {
        <div class="navbar navbar-dark bg-primary">
            <div class="w-100 navbar navbar-dark bg-primary d-flex flex-row px-4 justify-content-between flex-nowrap">
                <div class="d-flex flex-row justify-content-start text-light">
                   <object type="image/svg+xml" data="img/icon/prompt-academy-logo.svg" width="100px" height="40px">
                        Your browser does not support SVG
                    </object>
                    <span class="navbar-brand mb-0 ms-1 text-light">Powered by <br/>Azure OpenAi </span>
                     <object type="image/svg+xml" data="img/azure.svg" width="30px" height="30px">
                        Your browser does not support SVG
                    </object>
                </div>

                <button class="navbar-toggler border-0 text-light" @onclick="HelpDialogToggle">
                    <i class="bi bi-patch-question"></i>
                </button>
                <button class="navbar-toggler border-0 text-light" @onclick="ToggleNavMenu">
                <i class="bi bi-arrow-right-square-fill"></i>
                 </button>
            </div>
        </div>
    } 
    <h6 class="px-4 display-6 text-secondary p-2">@GetChatSessionName()</h6>
    <div class="px-4 pb-4 pt-2 flex-grow-1 overflow-y-auto overflow-x-hidden align-items-stretch" id="MessagesInChatdiv">
        @if (CurrentSession is null)
        {
            <div class="alert alert-primary">               
                <div class="alert-heading">
                    <div class="spinner-border text-primary me-1" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Loading...
                </div>
                <p class="text-nowrap mb-0 fst-italic">
                    Please wait while your chat loads.
                </p>
            </div>
        }
        else if (CurrentSession.SessionId == Interface.EMPTY_SESSION)
        {
            <div class="alert alert-warning">                
                <h4 class="alert-heading">
                    <i class="bi bi-exclamation-triangle-fill me-1" aria-hidden="true"></i>
                    No Chats Available
                </h4>
                <p class="text-nowrap mb-0 fst-italic">
                    Use the "Create New Chat" option to start a new chat.
                </p>
                <p></p>
            </div>
                        <div class="container">
                        <h3>More a Art than a science</h3>
                        <p>Prompt engineering is a process of creating a prompt, or a question, that encourages a user to take a desired action. It is a powerful tool for increasing user engagement and driving conversions. Here is an example of how to create a prompt engineering:</p>

                        <div class="row">
                            <div class="col-md-6">
                            <h3>Step 1: Identify the Goal</h3>
                            <p>The first step in creating a prompt engineering is to identify the goal. What action do you want the user to take? Do you want them to sign up for a newsletter, download an app, or make a purchase? Once you have identified the goal, you can move on to the next step.</p>
                            </div>
                            <div class="col-md-6">
                            <h3>Step 2: Craft the Prompt</h3>
                            <p>The next step is to craft the prompt. This is where you create the question or statement that will encourage the user to take the desired action. Make sure the prompt is clear and concise, and that it speaks to the user's needs. For example, if you want the user to sign up for a newsletter, you could create a prompt like "Sign up for our newsletter and get the latest updates!"</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                            <h3>Step 3: Test and Optimize</h3>
                            <p>The final step is to test and optimize the prompt. This involves testing different versions of the prompt to see which one performs best. You can also use A/B testing to compare different versions of the prompt and determine which one is most effective. Once you have identified the best performing prompt, you can use it to drive conversions.</p>
                            </div>
                        </div>
                        </div>
        }
        else
        {
            if (_messagesInChat is null || _loadingComplete == false)
            {
                <div class="alert alert-primary">
                    <div class="alert-heading">
                        <div class="spinner-border text-primary me-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        Loading...
                    </div>
                    <p class="text-nowrap mb-0 fst-italic">
                        Please wait while your chat loads.
                    </p>
                </div>
            }
            else
            {
                if (_messagesInChat.Count == 0)
                {
                    <div class="alert alert-info">                
                        <h4 class="alert-heading">
                            <i class="bi bi-lightbulb-fill me-1" aria-hidden="true"></i>
                            Get Started
                        </h4>
                        <p class="text-nowrap mb-0 fst-italic">
                            Start chatting with your helpful AI assistant.
                        </p>
                    </div>

                        <h3>More a Art than a science</h3>
                        <p>Prompt engineering is a process of creating a prompt, or a question, that encourages a user to take a desired action. It is a powerful tool for increasing user engagement and driving conversions. Here is an example of how to create a prompt engineering:</p>

                        <div class="container">
                        <div class="row">
                            <div class="col-md-6">
                            <h3>Step 1: Identify the Goal</h3>
                            <p>The first step in creating a prompt engineering is to identify the goal. What action do you want the user to take? Do you want them to sign up for a newsletter, download an app, or make a purchase? Once you have identified the goal, you can move on to the next step.</p>
                            </div>
                            <div class="col-md-6">
                            <h3>Step 2: Craft the Prompt</h3>
                            <p>The next step is to craft the prompt. This is where you create the question or statement that will encourage the user to take the desired action. Make sure the prompt is clear and concise, and that it speaks to the user's needs. For example, if you want the user to sign up for a newsletter, you could create a prompt like "Sign up for our newsletter and get the latest updates!"</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                            <h3>Step 3: Test and Optimize</h3>
                            <p>The final step is to test and optimize the prompt. This involves testing different versions of the prompt to see which one performs best. You can also use A/B testing to compare different versions of the prompt and determine which one is most effective. Once you have identified the best performing prompt, you can use it to drive conversions.</p>
                            </div>
                        </div>
                        </div>
                }
                else
                {
                    <div class="toast-container position-static w-100 d-flex flex-column align-items-stretch">
                        @foreach (var msg in _messagesInChat)
                        {
                            <div class="toast fade show w-75 rounded-2 @(msg.Sender == nameof(Participants.Assistant) ? "align-self-end" : "align-self-start")">
                                <div class="toast-header @(msg.Sender == nameof(Participants.Assistant) ? "bg-dark-subtle text-light" : "bg-primary text-light")">
                                    <i class="bi @(msg.Sender == nameof(Participants.Assistant) ? "bi-robot" : "bi-person") me-1" aria-hidden="true"></i>
                                    <strong class="me-auto text-capitalize">
                                        @msg.Sender
                                    </strong>
                                    <small>
                                        @msg.TimeStamp.Humanize()
                                    </small>
                                </div>
                                <div class="toast-body">
                                    <i class="bi bi-grip-vertical mr-2 text-black-50"></i>
                                    @{
                                        var text = msg.Text.Replace("\n", "<br />");
                                        Regex rgx = new Regex("```");
                                        var matches = rgx.Matches(text);
                                        if(matches.Count() > 0)
                                            for(int i = 0; i < matches.Count; i++)
                                                if(i % 2 == 0)
                                                    // even = start code block tag
                                                    text = rgx.Replace(text, "<pre><code>", 1, i);
                                                else
                                                    // odd = end code block tag
                                                    text = rgx.Replace(text, "</pre></code>", 1, i);
                                        MarkupString html = new MarkupString(text);
                                    }
                                    @html
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        }            			
	</div>
    <div class="bg-primary text-light px-4 py-2 rounded-top-2 text-dark d-flex flex-column justify-content-center">
        @if (CurrentSession is not null && CurrentSession?.SessionId != Interface.EMPTY_SESSION)
        {
            <div class="input-group">
               
                <i class="bi bi-body-text input-group-text" aria-hidden="true"></i>
                <input class="form-control form-control-sm" type="text" @bind="@UserPromptSet" @onkeydown="@Enter" @bind-value="selectedOption" @oninput="@((e) => { UserPrompt=e.Value?.ToString();})" rows="1" placeholder="<What is you prompt/ask ?>">
                <button type="button" class="btn btn-outline-secondary" @onclick="SubmitPromptAsync">
                    <i class="bi bi-send-fill" aria-hidden="true"></i>
                </button>
            </div>
        }
    </div>			
</div>

@code {

    [Parameter]
    public EventCallback<string> OnChatUpdated { get; set; }

    [Parameter]
    public Session? CurrentSession { get; set; }

    [Parameter]
    public bool ShowHeader { get; set; }

    public bool HelpDialogVisible { get; set; }

	[Parameter]
    public EventCallback OnNavBarVisibilityUpdated { get; set; }

    private string? UserPrompt { get; set; }

    [Parameter]
    public string? UserPromptSet { get; set; }
	
    private List<Message>? _messagesInChat;
    private static event EventHandler<Session>? _onMessagePosted;
    private bool _loadingComplete;

	async private Task ToggleNavMenu()
    {
        await OnNavBarVisibilityUpdated.InvokeAsync();
    }

    private Task HelpDialogToggle()
    {
        HelpDialogVisible = !HelpDialogVisible;
        return Task.CompletedTask;
    }



    public async Task ReloadChatMessagesAsync()
    {
        if (CurrentSession is not null)
        {
            _messagesInChat = await chatService.GetChatSessionMessagesAsync(CurrentSession.SessionId);
        }
    }

    protected override void OnInitialized()
    {
        _onMessagePosted += async (o, e) =>
        {
            await this.InvokeAsync(async () =>
            {
                if (e.SessionId == CurrentSession?.SessionId)
                {
                    await this.ReloadChatMessagesAsync();
                    this.StateHasChanged();
                }
            });
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentSession is null)
        {
            return;
        }

        if (CurrentSession.SessionId != Interface.EMPTY_SESSION & CurrentSession.SessionId is not null)
        {
            _messagesInChat = await chatService.GetChatSessionMessagesAsync(CurrentSession?.SessionId);
        }

        _loadingComplete = true;
    }

    public void ChangeCurrentChatSession(Session session)
    {
        CurrentSession = session;
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SubmitPromptAsync();
        }
    }

    private async Task SubmitPromptAsync()
    {
        if (CurrentSession?.SessionId == Interface.EMPTY_SESSION || UserPrompt == String.Empty || UserPrompt is null)
        {
            return;
        }

        if (UserPrompt != String.Empty)
        {           
            UserPromptSet = String.Empty;
        }

        await chatService.GetChatCompletionAsync(CurrentSession?.SessionId, UserPrompt);

        if(_messagesInChat?.Count == 2)
        {
            string newSessionName;
            newSessionName = await chatService.SummarizeChatSessionNameAsync(CurrentSession?.SessionId, String.Join(Environment.NewLine, _messagesInChat.Select(m => m.Text)));

            if (CurrentSession is not null)
            {
                CurrentSession.Name = newSessionName;
            }
        }
        await OnChatUpdated.InvokeAsync();

        if (_onMessagePosted is not null && CurrentSession is not null)
        {
            _onMessagePosted.Invoke(null, CurrentSession);
        }

        await ScrollLastChatToView();
    }

    private string GetChatSessionName() => CurrentSession switch 
    {
        null => String.Empty,
        (Session s) when s.SessionId == Interface.EMPTY_SESSION => String.Empty,
        _ => CurrentSession.Name
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollLastChatToView();
    }

    /// <remarks>
    /// This is a hack to get the scroll to work.  Need to find a better way to do this.
    /// </remarks>
    private async Task ScrollLastChatToView()
    {
        await JSRuntime.InvokeAsync<bool>("scrollToLastMessage");
    }
}
