@using Cosmos.Chat.GPT.Constants
@using Cosmos.Chat.GPT.Services
@using Humanizer
@using System.Text.RegularExpressions;
@inject ChatService chatService
@inject IJSRuntime JSRuntime

<div class="h-100 mh-100 d-flex flex-column overflow-hidden justify-content-start">
    @if (ShowHeader)
    {
        <div class="navbar navbar-dark bg-primary">
            <div class="w-100 navbar navbar-dark bg-primary d-flex flex-row px-4 justify-content-between flex-nowrap">
                <div class="d-flex flex-row justify-content-start">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500" height="30" fill="currentColor" class="text-light">
                    <path fill="#0072C6" d="M256 0C114.6 0 0 114.6 0 256s114.6 256 256 256 256-114.6 256-256S397.4 0 256 0zm0 480c-119.3 0-216-96.7-216-216S136.7 48 256 48s216 96.7 216 216-96.7 216-216 216z"/>
                    <path fill="#FFF" d="M256 96c-70.7 0-128 57.3-128 128s57.3 128 128 128 128-57.3 128-128-57.3-128-128-128zm0 224c-44.2 0-80-35.8-80-80s35.8-80 80-80 80 35.8 80 80-35.8 80-80 80z"/>
                    </svg>
                    <span class="navbar-brand mb-0 ms-1 h1">Azure Prompt academy</span>
                    <i class="bi bi-plus mx-3 text-light"></i>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500" height="30" fill="currentColor" class="text-light">
                        <path d="M415.98 265.82v-.27a17.24 17.24 0 1 0 .01.27ZM224.4 321.87a17.24 17.24 0 1 0 34.48 0 17.24 17.24 0 0 0-34.48 0Z"/>
                        <path d="M397.92 209.51C395.91 95.77 266.41 51.59 182.48 96.66l-.12 145.45a5.39 5.39 0 0 0 5.39 5.39h41.76a18.85 18.85 0 0 1 18.86 18.86v25.6a29.36 29.36 0 1 1-36.1 28.56 29.1 29.1 0 0 1 22.9-28.56v-26.94a5.65 5.65 0 0 0-5.66-5.66h-41.76a18.59 18.59 0 0 1-18.59-18.59v-135.9c-21.08 14.76-38.2 36.03-47.96 64.23-163.09 22.89-139.5 256.6 22.91 252.74h14.81V305.98a5.39 5.39 0 0 0-5.39-5.39h-23.71a29.36 29.36 0 1 1 0-13.2h23.71a18.59 18.59 0 0 1 18.59 18.59v115.86h148.46V210.59a5.39 5.39 0 0 0-5.39-5.39h-28.83a29.36 29.36 0 1 1-28.56-36.1 29.1 29.1 0 0 1 28.56 22.9h27.75a18.59 18.59 0 0 1 18.59 18.59v94.84h53.89a5.66 5.66 0 0 0 5.66-5.66v-5.39a29.38 29.38 0 0 1 6.73-57.94l1.1-.02a29.37 29.37 0 0 1 29.35 29.39 29.36 29.36 0 0 1-22.9 28.56v5.39a18.85 18.85 0 0 1-18.86 18.86h-53.89v103.2h43.38c61.49 2.64 114.03-46.08 115.32-107.78-1.2-53.49-41.47-98-94.58-104.54Z"/>
                        <circle cx="101" cy="293.85" r="17.24"/>
                        <circle cx="257.81" cy="198.46" r="17.24"/>
                        <path d="m182.49 96.66-.07.05.07-.04Z"/>
                    </svg>
                    <span class="navbar-brand mb-0 ms-1 h1">OpenAI</span>
                </div>
                <button class="navbar-toggler border-0" @onclick="ToggleNavMenu">
                    <i class="bi bi-arrow-left-square-fill"></i>
                </button>
            </div>
        </div>
    } 
    <h6 class="px-4 display-6 text-secondary p-2">@GetChatSessionName()</h6>
    <div class="px-4 pb-4 pt-2 flex-grow-1 overflow-y-auto overflow-x-hidden align-items-stretch" id="MessagesInChatdiv">
        @if (CurrentSession is null)
        {
            <div class="alert alert-primary">               
                <div class="alert-heading">
                    <div class="spinner-border text-primary me-1" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Loading...
                </div>
                <p class="text-nowrap mb-0 fst-italic">
                    Please wait while your chat loads.
                </p>
            </div>
        }
        else if (CurrentSession.SessionId == Interface.EMPTY_SESSION)
        {
            <div class="alert alert-warning">                
                <h4 class="alert-heading">
                    <i class="bi bi-exclamation-triangle-fill me-1" aria-hidden="true"></i>
                    No Chats Available
                </h4>
                <p class="text-nowrap mb-0 fst-italic">
                    Use the New Chat option to start a new chat.
                </p>
            </div>
        }
        else
        {
            if (_messagesInChat is null || _loadingComplete == false)
            {
                <div class="alert alert-primary">
                    <div class="alert-heading">
                        <div class="spinner-border text-primary me-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        Loading...
                    </div>
                    <p class="text-nowrap mb-0 fst-italic">
                        Please wait while your chat loads.
                    </p>
                </div>
            }
            else
            {
                if (_messagesInChat.Count == 0)
                {
                    <div class="alert alert-info">                
                        <h4 class="alert-heading">
                            <i class="bi bi-lightbulb-fill me-1" aria-hidden="true"></i>
                            Get Started
                        </h4>
                        <p class="text-nowrap mb-0 fst-italic">
                            Start chatting with your helpful AI assistant.
                        </p>
                    </div>
                }
                else
                {
                    <div class="toast-container position-static w-100 d-flex flex-column align-items-stretch">
                        @foreach (var msg in _messagesInChat)
                        {
                            <div class="toast fade show w-75 rounded-3 @(msg.Sender == nameof(Participants.Assistant) ? "align-self-end" : "align-self-start")">
                                <div class="toast-header @(msg.Sender == nameof(Participants.Assistant) ? "bg-success text-dark" : "bg-primary text-light")">
                                    <i class="bi @(msg.Sender == nameof(Participants.Assistant) ? "bi-robot" : "bi-person") me-1" aria-hidden="true"></i>
                                    <strong class="me-auto text-capitalize">
                                        @msg.Sender
                                    </strong>
                                    @if(msg.Tokens is not null) {
                                        <span class="me-2 badge rounded-pill bg-light">
                                            Tokens: @msg.Tokens
                                        </span>
                                    }
                                    <small>
                                        @msg.TimeStamp.Humanize()
                                    </small>
                                </div>
                                <div class="toast-body">
                                    <i class="bi bi-grip-vertical mr-2 text-black-50"></i>
                                    @{
                                        var text = msg.Text.Replace("\n", "<br />");
                                        Regex rgx = new Regex("```");
                                        var matches = rgx.Matches(text);
                                        if(matches.Count() > 0)
                                            for(int i = 0; i < matches.Count; i++)
                                                if(i % 2 == 0)
                                                    // even = start code block tag
                                                    text = rgx.Replace(text, "<pre><code>", 1, i);
                                                else
                                                    // odd = end code block tag
                                                    text = rgx.Replace(text, "</pre></code>", 1, i);
                                        MarkupString html = new MarkupString(text);
                                    }
                                    @html
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        }            			
	</div>
    <div class="bg-primary text-light px-4 py-2 rounded-top-5 text-dark d-flex flex-column justify-content-center">
        @if (CurrentSession is not null && CurrentSession?.SessionId != Interface.EMPTY_SESSION)
        {
            <div class="input-group">
                <i class="bi bi-body-text input-group-text" aria-hidden="true"></i>
                <input class="form-control form-control-sm" type="text" @bind="@UserPromptSet" @onkeydown="@Enter" @oninput="@((e) => { UserPrompt=e.Value?.ToString();})" rows="1" placeholder="<Your Message>"></input>
                <button type="button" class="btn btn-outline-secondary" @onclick="SubmitPromptAsync">
                    <i class="bi bi-send-fill" aria-hidden="true"></i>
                </button>
            </div>
        }
    </div>			
</div>

@code {

    [Parameter]
    public EventCallback<string> OnChatUpdated { get; set; }

    [Parameter]
    public Session? CurrentSession { get; set; }

    [Parameter]
    public bool ShowHeader { get; set; }

	[Parameter]
    public EventCallback OnNavBarVisibilityUpdated { get; set; }

    private string? UserPrompt { get; set; }

    private string? UserPromptSet { get; set; }
	
    private List<Message>? _messagesInChat;
    private static event EventHandler<Session>? _onMessagePosted;
    private bool _loadingComplete;

	async private Task ToggleNavMenu()
    {
        await OnNavBarVisibilityUpdated.InvokeAsync();
    }

    public async Task ReloadChatMessagesAsync()
    {
        if (CurrentSession is not null)
        {
            _messagesInChat = await chatService.GetChatSessionMessagesAsync(CurrentSession.SessionId);
        }
    }

    protected override void OnInitialized()
    {
        _onMessagePosted += async (o, e) =>
        {
            await this.InvokeAsync(async () =>
            {
                if (e.SessionId == CurrentSession?.SessionId)
                {
                    await this.ReloadChatMessagesAsync();
                    this.StateHasChanged();
                }
            });
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentSession is null)
        {
            return;
        }

        if (CurrentSession.SessionId != Interface.EMPTY_SESSION & CurrentSession.SessionId is not null)
        {
            _messagesInChat = await chatService.GetChatSessionMessagesAsync(CurrentSession?.SessionId);
        }

        _loadingComplete = true;
    }

    public void ChangeCurrentChatSession(Session session)
    {
        CurrentSession = session;
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SubmitPromptAsync();
        }
    }

    private async Task SubmitPromptAsync()
    {
        if (CurrentSession?.SessionId == Interface.EMPTY_SESSION || UserPrompt == String.Empty || UserPrompt is null)
        {
            return;
        }

        if (UserPrompt != String.Empty)
        {           
            UserPromptSet = String.Empty;
        }

        await chatService.GetChatCompletionAsync(CurrentSession?.SessionId, UserPrompt);

        if(_messagesInChat?.Count == 2)
        {
            string newSessionName;
            newSessionName = await chatService.SummarizeChatSessionNameAsync(CurrentSession?.SessionId, String.Join(Environment.NewLine, _messagesInChat.Select(m => m.Text)));

            if (CurrentSession is not null)
            {
                CurrentSession.Name = newSessionName;
            }
        }
        await OnChatUpdated.InvokeAsync();

        if (_onMessagePosted is not null && CurrentSession is not null)
        {
            _onMessagePosted.Invoke(null, CurrentSession);
        }

        await ScrollLastChatToView();
    }

    private string GetChatSessionName() => CurrentSession switch 
    {
        null => String.Empty,
        (Session s) when s.SessionId == Interface.EMPTY_SESSION => String.Empty,
        _ => CurrentSession.Name
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollLastChatToView();
    }

    /// <remarks>
    /// This is a hack to get the scroll to work.  Need to find a better way to do this.
    /// </remarks>
    private async Task ScrollLastChatToView()
    {
        await JSRuntime.InvokeAsync<bool>("scrollToLastMessage");
    }
}
